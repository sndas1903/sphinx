# -*- coding: utf-8 -*-
#

# IMPORTANT:
# this conf.py must reside in the top folder of the repository, since the references for plant uml are defined with 

import os
import sys
import datetime
import subprocess
import shutil

sys.path.append(os.path.abspath("."))
sys.path.insert(0, os.path.abspath('..'))
sys.path.insert(0, os.path.abspath('../../docs'))

# General information about the project.
project = 'Test project'
now = datetime.datetime.now()
copyright = '2020-{year}, Test'.format(year=now.year)
author = ''#TODO: define author

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = 'Pre-release ({date})'.format(date=now.strftime('%b %d, %Y')) #TODO: define version
# The full version, including alpha/beta/rc tags.
release = 'Pre-release'


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
#source_suffix = ['.rst', '.md']
source_suffix = ['.rst' ]

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
#TODO: add all other folders
exclude_patterns = ['_build', 'Thumbs.db', '.markdownlintrc',
    '.DS_Store','.git','.github','.devcontainer','.vscode',
    '_tools/c4plantuml',
    '_tools/sphinxneeds-docker',
    '00_vision', 
    '01_architectural_drivers',
    '02_context_and_scope',
    '03_use_cases',
    '04_architecture/02_current',
    '04_architecture/03_deprecated',
    '04_architecture/01_intended/Ops/**.md',
    '04_architecture/01_intended/Dev',
    '04_architecture/01_intended/OS_draft/interfaces',
    '04_architecture/01_intended/OS_draft/subsystems/service_adapters',
    '04_architecture/01_intended/OS_draft/subsystems/vehicle_applications',
    '04_architecture/01_intended/OS_draft/subsystems/vehicle_infrastructure',
    '04_architecture/01_intended/OS_draft/subsystems/vehicle_service_middleware',
    '06_designs',
    '05_decisions',
    '08_crosscutting',
    '10_info',
    'src/Lloyd.Ops.ApiGateways/src',
    'src/Lloyd.Ops.DeviceEmulator/Lloyd.Ops.DeviceEmulator',
    'src/Lloyd.Ops.Processors',
    'src/provisioning-scope-service',
    'src/Lloyd.Ops.Processors/docs/1087-platform_metrics_LMP',
    'src/Lloyd.Ops.Processors/docs/826-VSS_datapoints_batteryLevel_LMP'
    ]


# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# Configure HTML theme
html_theme_options = {
    # Toc options
    'collapse_navigation': False
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_tools/doc-as-code/_static']

html_logo = '_tools/doc-as-code/_static/logotype.png' #TODO: change to logos to something official

html_last_updated_fmt = '%b %d, %Y'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.

extensions = ['sphinxcontrib.needs','sphinxcontrib.plantuml', 'sphinxcontrib.test_reports', 'breathe', 
'sphinx.ext.mathjax', 'sphinx.ext.ifconfig', 'myst_parser', 'matplotlib.sphinxext.plot_directive',
'sphinx.ext.duration', 'sphinx.ext.graphviz', 'sphinx.ext.todo', 'sphinx_git', 'sphinx_copybutton']

#html_theme = 'alabaster' 

import sphinx_rtd_theme 
html_theme = 'sphinx_rtd_theme' 
html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]
html_css_files = [
    'custom.css'
]

# #Enable if doxygen needed
# if shutil.which("doxygen"):
#     breathe_projects = {
#         "longitudinal_emergency": "_doxygen/xml"
#         }
#     breathe_default_project = "longitudinal_emergency"

# defined plantuml.include.path to make puml absolute inlcude paths working

plantuml = 'java -Dplantuml.include.path=' + os.path.abspath(".") + ' -Djava.awt.headless=true -jar /usr/share/plantuml/plantuml.jar -DRELATIVE_INCLUDE=' + os.path.abspath(".") + '/_tools/c4plantuml'
plantuml_output_format = 'svg'

myst_enable_extensions = ["colon_fence"]

#need type definitions
needs_types = [dict(directive="cap-sys", title="Capability", prefix="CAP_SYS_", color="#BFD8D2", style="database"),
               dict(directive="debt", title="Technical Debt", prefix="DEBT_", color="#BFD8D2", style="database"),
               dict(directive="req-stk", title="Stakeholder Requirement", prefix="REQ_STK_", color="#BFD8D2", style="database"),
               dict(directive="req-sys", title="System Requirement", prefix="REQ_SYS_", color="#BFD8D2", style="node"),
               dict(directive="req-sw", title="Software Requirement", prefix="REQ_SW_", color="#FEDCD2", style="artifact"),
               dict(directive="comp-sys", title="System Component", prefix="COMP_SYS_", color="#DF744A", style="component"),
               dict(directive="comp-sw", title="Software Component", prefix="COMP_SW_", color="#DF744A", style="component"),
               dict(directive="test-spec", title="Test Specification", prefix="TS_", color="#DCB239", style="control"),
           ]

# need option definitions
from docutils.parsers.rst import directives   
needs_extra_options = {
    "asil": directives.unchanged,
    "effort": directives.unchanged, # Number: fibonacci (story points)
    "decision": directives.unchanged, # (keep, fix, invalid)
    "fixed-in": directives.unchanged, # e.g. ticket id
    "version": directives.unchanged,
    "relates": directives.unchanged,
    "related-link": directives.unchanged,
    "likelihood": directives.unchanged, # (low, medium, high, unknown)
    "risk-to-fix": directives.unchanged, # (low, medium, high, unknown)
    "severity" : directives.unchanged # (minor, normal, major, blocker, unknown )
}

# need link definitions
needs_extra_links = [
   {
      "option": "depends",
      "incoming": "is depended by",
      "outgoing": "depends"  
   },    
   {
      "option": "requires",
      "incoming": "is required by",
      "outgoing": "requires" 
   },
   {
      "option": "tracks",
      "incoming": "tracks",
      "outgoing": "is tracked by"  
   },
   {
      "option": "implements",
      "incoming": "is implemented by",
      "outgoing": "implements"
   },
   {
      "option": "impacts",
      "incoming": "impacted by",
      "outgoing": "impacts"
   },
   {
      "option": "validates",
      "incoming": "is validated by",
      "outgoing": "validates"
   },
   {
      "option": "tests",
      "incoming": "is tested by",
      "outgoing": "tests"
   }
]

# new layout to show an external url link
needs_layouts = {
    'related-info': {
        'grid': 'simple',
        'layout': {
            'head': ['<<meta("type_name")>>: **<<meta("title")>>** <<meta_id()>>  <<collapse_button("meta", collapsed="icon:arrow-down-circle", visible="icon:arrow-right-circle", initial=False)>>'],
            'meta': ['<<meta_all(prefix="", postfix="", exclude=["layout", "relates", "related-link"], no_links=True)>>',      
                     '<<meta_links_all(prefix="", postfix="", exclude=None)>>',          
                     'related-link: <<link("related-link", "link", is_dynamic=True)>>']
        }
    }
}

# dynamic functions
def create_tags(app, need, needs):
    return (need['id']).split("_")

# registration of dynamic functions
needs_functions = [create_tags]

# setting default value for options
needs_global_options = {
    'tests': "[[tr_link('classname', 'title')]]"
}

# Tell sphinx what the primary language being documented is.
primary_domain = 'cpp'  # pylint: disable=C0103

# Tell sphinx what the pygments highlight language should be.
highlight_language = 'cpp'  # pylint: disable=C0103

#Use -W in your sphinx build command to stop the whole build, 
#if a warning is raised. This will handle all warnings as exceptions.
needs_warnings = {
  # req need must not have an empty status field
  'req_with_no_status': "type == 'req-sw' and (status is None or len(status) == 0)"
}